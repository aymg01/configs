#!/usr/bin/env python
#-*- coding: UTF-8 -*-

import browser
import os
import re
import sys

from debug import debug
from os import environ

rc_file = environ["HOME"] + "/.claro"
URL_LOGIN = ("http://www.servicios.claroargentina.com/AutogestionCore2006/"
    "servlet/Controller?EVENT=WELCOMEMAS&OFLINE")
URL_SALDO = ("http://www.servicios.claroargentina.com/AutogestionCore2006/"
    "servlet/Controller?EVENT=DATOS_FACTURA")

"""Este programa lee el archivo ~/.claro que debe ser un CSV de formato:
usuario;numero;pin

Se aceptan multiples registros.

Como la nueva página de servicios claro está fallando mucho (la mayor parte del
tiempo no muestra el saldo disponible) estamos evaluando la posibilidad de
que el script consulte en la vieja página cuando los datos no estén disponibles
en la nueva.

http://www.servicios.claroargentina.com/AutogestionCore2006/servlet/Controller
"""

class CLARO:
    def __init__(self):
        self.browser = browser.Browser()
        self._login_form = None

    def login(self, numero, pin):

        if self._login_form is None:
            debug("Consiguiendo un formulario")
            forms = self.browser.get_forms(URL_LOGIN)
            html = self.browser.get_html()
            if forms:
                if "individuos" in self.browser.get_url():
                    self._login_form = forms[1]
                    self._login_form["_58_login"] = numero
                    self._login_form["_58_password"] = pin
                else:
                    self._login_form = forms[0]
                    self._login_form["loginNumber"] = numero
                    self._login_form["password"] = pin
            elif "En este momento no podemos atender tu consulta." in html:
                return False
            else:
                self.browser.show()

        error = self._login_form.submit()
        if "Bienvenido" in error[1] or "Inicio" in error[1]:
            return False
        else:
            return error


    def get_saldo(self, numero, pin):
        self.login(numero, pin)

        if "individuos" in self.browser.get_url():
            html = self.browser.get_html()

            regex_prepago = (r'''(?six)
                >.*?saldo.*?prepago.*?recarga.*?\$\s*
                    (\d*.\d*)
                ''')

            regex_libres = (r'''(?six)
                >.*?saldo.*?prepago.*?promocional.*?\$\s*
                    (\d*.\d*)
                ''')
            self.browser.go("http://individuos.claro.com.ar/c/portal/logout")


        else:
            html = self.browser.get_html(URL_SALDO)

            regex_prepago = (r'''(?six)
                class="txt05".*?>.*?saldo.*?prepaga.*?\$\s*
                    (\d*,\d*)
                ''')

            regex_libres = (r'''(?six)
                class="txt05".*?>.*?pesos.*?libres.*?disponibles.*?\$\s*
                    (\d*,\d*)
                ''')

        try:
            res = re.search(regex_prepago, html)
            prepago = "%s" % (res.group(1))
        except AttributeError:
            if "En este momento no podemos atender tu consulta." in html:
                return "Error"
            else:
#                print(self.browser.get_html())
                self.browser.show()
                return "Error"
        else:
            prepago = prepago.replace(",", ".")

        try:
            res = re.search(regex_libres, html)
            libres = "%s" % (res.group(1))
        except AttributeError:
            libres = "0.0"
        else:
            libres = libres.replace(",", ".")

        libres = float(libres)


        regex_consumidos = (r'''(?six)
            class="txt05".*?>.*?total.*?pesos.*?consumidos.*?\$\s*(\d*,\d*)
            ''')

        try:
            res = re.search(regex_consumidos, html)
            libresconsumidos = "%s" % (res.group(1))
        except AttributeError:
            libresconsumidos = "0.0"
        else:
            libresconsumidos = libresconsumidos.replace(",", ".")

        libresconsumidos = float(libresconsumidos)
        libres -= libresconsumidos
        
        total = float(libres) + float(prepago)

        return "%s + %s = %.2f" % (libres, prepago, total)



def main():
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
    claro = CLARO()

    users = [line.strip().split(";")
        for line in open(rc_file).readlines()
            if not "#" in line]

    for user in users:
        print("%s: %s" % (user[0], CLARO().get_saldo(user[1], user[2])))


if __name__ == "__main__":
    exit(main())
